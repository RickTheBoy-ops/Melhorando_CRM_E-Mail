# =======================================================
# BILLIONMAIL - CONNECTION POOL CONFIGURATION
# =======================================================
# ðŸš€ Optimized connection pool settings for high-volume email processing
# ðŸ“Š Tuned for performance, reliability, and resource efficiency

# =======================================================
# POSTGRESQL CONNECTION POOL SETTINGS
# =======================================================
# Used by: auth-service, template-service, contact-service, analytics-service

# Maximum number of connections in the pool
POSTGRES_MAX_CONNS=25

# Minimum number of idle connections to maintain
POSTGRES_MIN_CONNS=5

# Maximum lifetime of a connection in seconds (1 hour)
POSTGRES_MAX_CONN_LIFETIME=3600

# Maximum idle time for a connection in seconds (30 minutes)
POSTGRES_MAX_CONN_IDLE_TIME=1800

# Health check interval in seconds
POSTGRES_HEALTH_CHECK_PERIOD=60

# Connection timeout in seconds
POSTGRES_CONNECT_TIMEOUT=10

# =======================================================
# REDIS CONNECTION POOL SETTINGS
# =======================================================
# Used by: email-service, auth-service (sessions)

# Maximum number of socket connections
REDIS_POOL_SIZE=50

# Minimum number of idle connections
REDIS_MIN_IDLE=10

# Maximum number of idle connections
REDIS_MAX_IDLE=20

# Dial timeout in seconds
REDIS_DIAL_TIMEOUT=5

# Read timeout in seconds
REDIS_READ_TIMEOUT=3

# Write timeout in seconds
REDIS_WRITE_TIMEOUT=3

# Connection age in seconds (5 minutes)
REDIS_MAX_CONN_AGE=300

# Pool timeout in seconds
REDIS_POOL_TIMEOUT=4

# Idle timeout in seconds (5 minutes)
REDIS_IDLE_TIMEOUT=300

# Health check frequency in seconds
REDIS_HEALTH_CHECK=60

# Retry configuration
REDIS_MAX_RETRIES=3
REDIS_MIN_RETRY_BACKOFF=8
REDIS_MAX_RETRY_BACKOFF=512

# =======================================================
# POSTGRESQL SERVER OPTIMIZATION
# =======================================================
# These settings are applied directly to PostgreSQL server

# Connection limits
PG_MAX_CONNECTIONS=500

# Memory settings
PG_SHARED_BUFFERS=512MB
PG_EFFECTIVE_CACHE_SIZE=2GB
PG_MAINTENANCE_WORK_MEM=128MB
PG_WORK_MEM=8MB

# WAL settings
PG_WAL_BUFFERS=32MB
PG_MIN_WAL_SIZE=1GB
PG_MAX_WAL_SIZE=4GB
PG_CHECKPOINT_TIMEOUT=15min

# Performance settings
PG_RANDOM_PAGE_COST=1.1
PG_EFFECTIVE_IO_CONCURRENCY=200
PG_MAX_WORKER_PROCESSES=8
PG_MAX_PARALLEL_WORKERS=8
PG_MAX_PARALLEL_WORKERS_PER_GATHER=4
PG_MAX_PARALLEL_MAINTENANCE_WORKERS=4

# Logging and monitoring
PG_LOG_MIN_DURATION_STATEMENT=1000
PG_LOG_CHECKPOINTS=on
PG_LOG_CONNECTIONS=on
PG_LOG_DISCONNECTIONS=on
PG_LOG_LOCK_WAITS=on
PG_DEADLOCK_TIMEOUT=1s

# Autovacuum settings
PG_AUTOVACUUM_MAX_WORKERS=3
PG_AUTOVACUUM_NAPTIME=20s

# =======================================================
# REDIS SERVER OPTIMIZATION
# =======================================================
# These settings are applied directly to Redis server

# Memory management
REDIS_MAXMEMORY=512mb
REDIS_MAXMEMORY_POLICY=allkeys-lru

# Persistence settings
REDIS_SAVE_900=1
REDIS_SAVE_300=10
REDIS_SAVE_60=10000
REDIS_APPENDONLY=yes
REDIS_APPENDFSYNC=everysec

# =======================================================
# MONITORING AND ALERTING
# =======================================================

# Pool monitoring intervals
POOL_MONITOR_UPDATE_INTERVAL=30s
POOL_MONITOR_LOG_INTERVAL=5m

# Alert thresholds
POOL_ALERT_HIGH_USAGE_THRESHOLD=80
POOL_ALERT_CONNECTION_TIMEOUT_THRESHOLD=5s
POOL_ALERT_SLOW_QUERY_THRESHOLD=1000ms

# =======================================================
# ENVIRONMENT-SPECIFIC OVERRIDES
# =======================================================

# Development environment (lower resource usage)
# POSTGRES_MAX_CONNS=10
# POSTGRES_MIN_CONNS=2
# REDIS_POOL_SIZE=20
# REDIS_MIN_IDLE=5

# Production environment (high performance)
# POSTGRES_MAX_CONNS=50
# POSTGRES_MIN_CONNS=10
# REDIS_POOL_SIZE=100
# REDIS_MIN_IDLE=20

# Load testing environment (maximum performance)
# POSTGRES_MAX_CONNS=100
# POSTGRES_MIN_CONNS=20
# REDIS_POOL_SIZE=200
# REDIS_MIN_IDLE=50

# =======================================================
# USAGE NOTES
# =======================================================
# 
# 1. Copy this file to .env in your project root
# 2. Adjust values based on your infrastructure capacity
# 3. Monitor pool usage via /health and /pool-stats endpoints
# 4. Use Prometheus metrics for detailed monitoring
# 5. Test thoroughly before deploying to production
#
# Pool sizing guidelines:
# - PostgreSQL: Start with 25 connections per service
# - Redis: Start with 50 connections for email service
# - Monitor and adjust based on actual usage patterns
# - Consider database server limits and concurrent services
#
# Performance tuning:
# - Increase pool sizes for high-traffic scenarios
# - Decrease timeouts for faster failure detection
# - Adjust health check intervals based on monitoring needs
# - Use connection lifetime limits to prevent stale connections